include("include/SOVIETInstructions.txt");
include("include/declarations.txt");

defineFunction(main, void)
{
	InitConstants();
	InitScriptConstants();
	
	_firstTime = 1;
	
	// main loop
	while(1 ? 1)
	{
		// new random time interval for next event
		Random(_random);
		if(_firstTime ? 1)
		{
			_minEventsInterval = 1;
			_eventsRandomInterval = 1;
			_firstTime = 0;
		}
		else()
		{
			_minEventsInterval = MIN_DAYS_NEXT_EVENT * 60;
			_eventsRandomInterval = MAX_RANDOM_DAYS_NEXT_EVENT * 60;
		}
		
		_nextEventWaiting = _minEventsInterval + _random % _eventsRandomInterval;
		
		// wait for next event
		for (i = 0, i < _nextEventWaiting, i = i + 1)
		{
			Script_Sleep(1.0);
		}
		 
		// handle event
		
		// rng event type
		Random(_random);
		_eventType = _random % EVENT_TYPES_COUNT;
		// destination
		_deliveryPending = 1;
		
		if(_destination ? NATO)
		{
			Objectives_CreateNewString("delivery", "NATO delivery");
		}
		else()
		{
			Objectives_CreateNewString("delivery", "USSR delivery");
		}
		
		
		SetupTarget(_eventType);
		Objective_AddRequirement("delivery", 10.0, "editor/status_waiting.png");
	
		Notification_CreateNewStringPic(
		"Aerial delivery",
		"Deliver specified cargo on time to get reward.",
		"resources/airplanes.png",
		vector);
		
		_departedPlanesCount = 0;
		_eventTime = _maxDeliveryTime * 60.0;
		_time = 0.0;
		//event time counter
		while(_deliveryPending ? 1 & j < _eventTime)
		{
			Vehicle_GetNumberOfVehicles(_numberOfVehicles);   
			for (_vehicleIndex = 0, _vehicleIndex < _numberOfVehicles, _vehicleIndex = _vehicleIndex + 1)
			{
				_vehicle.GetDataByIndex(_vehicleIndex);
				if(_vehicle.nVehicleType ? VEHICLETYPE_AIRPLANE)
				{
					_currentPlaneIndex = 150;
					// check if plane is on list
					for(k = 0, k < _departedPlanesCount, k = k + 1)
					{
						_currentPlane = _planes[k];
						if(_currentPlane.id ? _vehicleIndex)
						{
							_currentPlaneIndex = k;
						}
					}
					
					_resources.GetFromVehicle(_vehicleIndex);
					_resourcesAmount = ResourcesGetFromEventType(_eventType);
					_stopBuildingId = _vehicle.nBuilding_StationBuildingID;
					_building.GetDataByIndex(_stopBuildingId);
					
					//plane on list
					if(!(_currentPlaneIndex ? 150))
					{	
						_currentPlane = _planes[_currentPlaneIndex];
						_currentPlane.lastState = _currentPlane.state;
						// check if is heading to border with cargo
						// todo: validate if custom is NATO or Soviet
						if(_resourcesAmount > 2.0 & _building.nType ? BUILDINGTYPE_CUSTOMHOUSE)
						{
							// just departure from terminal
							if(_currentPlane.lastState ? 2)
							{
								_currentPlane.lastCargo = _resourcesAmount;
							}
							_currentPlane.state = HEADING_BORDER;
						}
						
						// check if is heading to airport
						if( _building.nType ? BUILDINGTYPE_CARGO_STATION | _building.nType ? BUILDINGTYPE_AIRPLANE_PARKING)
						{
							// check if empty
							if(_resourcesAmount < 1.0)
							{
								_currentPlane.state = HEADING_AIRPORT;
							}
						}
						
						// just departure from border
						if(_currentPlane.lastState ? HEADING_BORDER & _currentPlane.state ? HEADING_AIRPORT)
						{
							_currentPlane.exported = _currentPlane.exported + _currentPlane.lastCargo;
							_currentPlane.lastCargo = 0.0;
						}
						
						_planes[_currentPlaneIndex] = _currentPlane;
						
					}
					// not on list 
					// check if is heading to border with cargo

					// todo: validate if custom is NATO or Soviet
					else()
					{
						if(_resourcesAmount > 2.0 & _building.nType ? BUILDINGTYPE_CUSTOMHOUSE)
						{  
							_currentPlane.id = _vehicleIndex;
							_currentPlane.state = HEADING_BORDER;
							_currentPlane.lastState = HEADING_BORDER;
							_currentPlane.exported = 0.0;
							_currentPlane.lastCargo = _resourcesAmount;
							
							_planes[_departedPlanesCount] = _currentPlane;
							_departedPlanesCount = _departedPlanesCount + 1;
						}
					}
				}
			}
			
			_deliveredResources = 0.0;
			for (k = 0, k < PLANES_ARRAY_SIZE, k = k + 1)
			{
				_deliveredResources = _deliveredResources + _planes[k].exported;
			}
			
			if(_deliveredResources > _resourcesToDeliver)
			{
				Objective_UpdateRequirementToTarget("delivery", 0);
				Objective_SetComplete("delivery");
				Notification_CreateNewStringPic(
					"Delivery completed",
					"You exported all required products. You will be rewarded with additional bonus.",
					"editor/status_ok.png",
					vector);
				_deliveryPending = 0;
				
				Date_GetCurrentDate_DMY(_day, _month, _year);
				_year = _year - 1960;
				_years = IntToFloat(_year);
				
				// todo: reward
				if(_destination ? NATO)
				{
					_reward = _resourcesToDeliver * _basePriceUSD * REWARD_SCALE;
					// inflation
					_reward = _reward * (1.015 ^ _years);
					_rewardInt =  FloatToInt(_reward);
					Money_AddUSD(_rewardInt);
					
				}
				else()
				{
					_reward = _resourcesToDeliver * _basePriceUSD * REWARD_SCALE;
					// inflation
					_reward = _reward * (1.05 ^ _years);
					_rewardInt =  FloatToInt(_reward);
					Money_AddUSD(_rewardInt);
				}
				
				//nato: 1,5% inflation
				// soviet: 5% inflation
				Script_Sleep(5.0);
			}
			else()
			{
				Objective_UpdateRequirement("delivery", 0, _deliveredResources);
			}
			
			
			Script_Sleep(1.0);
			j = j + 1.0;
			_time = _time + 0.01666;
			Objective_UpdateRequirement("delivery", 1, _time);
		}
		if(_deliveryPending ? 1)
		{
			Notification_CreateNewStringPic(
					"Delivery failed",
					"The time for delivery is over.",
					"editor/status_notok.png",
					vector);
		}
		Objectives_ClearAll();
		
		// clear departuredPlanes
		for (k = 0, k < PLANES_ARRAY_SIZE, k = k + 1)
		{
			_currentPlane =  _planes[k];
			_currentPlane.id = 0;
			_currentPlane.state = UNKNOWN;
			_currentPlane.lastState = UNKNOWN;
			_currentPlane.exported = 0.0;
			_currentPlane.lastCargo = 0.0;
			_planes[k] = _currentPlane;
		}
	}
	end();
}

