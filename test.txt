include("include/SOVIETInstructions.txt");
defineVariable(int, _stopBuildingId);
defineVariable(Building, _building);
defineVariable(Resources, _resources);
defineVariable(int, _numberOfVehicles);
defineVariable(Vehicle, _vehicle);
defineVariable(vec3, vector);

defineVariable(int, i);
defineVariable(int, j);
defineVariable(int, k);
defineVariable(int, m);
defineVariable(int, _vehicleIndex);

defineVariable(int, _random);
defineVariable(int, _minEventsInterval);
defineVariable(int, _eventsRandomInterval);
defineVariable(int, _nextEventWaiting);
defineVariable(int, _eventType);
defineVariable(int, _eventTypesCount);
defineVariable(float, _eventTime);
defineVariable(float, _deliveredResources);
defineVariable(float, _resourcesToDeliver);
defineVariable(float, _deliveryMultiplayer);
defineVariable(char, _deliveryPending);
defineVariable(float, _multiply);
defineVariable(float, _maxDeliveryTime);
defineVariable(char, _destination);
defineVariable(float, _reward);
defineVariable(int, _rewardInt);
defineVariable(float, _basePriceRUB);
defineVariable(float, _basePriceUSD);

defineVariable(int, _departedPlanesCount);
defineVariable(char, _planeIsOnDepartureList);
defineVariable(char, _planeIsOnArrivalList);
defineVariable(float, _time);

defineVariable(int, _day);
defineVariable(int, _month);
defineVariable(int, _year);
defineVariable(float, _years);


defineVariable(float, _returnValue);
defineVariable(float, _resourcesAmount);

defineVariable(float, UNKNOWN);
defineVariable(float, HEADING_BORDER);
defineVariable(float, HEADING_AIRPORT);
defineVariable(int, EVENT_TYPES_COUNT);
defineVariable(int, PLANES_ARRAY_SIZE);
defineVariable(int, NATO);
defineVariable(int, USSR);

defineStruct(Plane, 106)
{
	defineStructVariable(Plane, int, id);
	// state 1 - heading to border with cargo, 2 - heading to terminal without cargo
	defineStructVariable(Plane, char, state);
	defineStructVariable(Plane, char, lastState);
	defineStructVariable(Plane, float, exported);
	defineStructVariable(Plane, float, lastCargo);
}
defineVariable(Plane, _currentPlane);
defineArray(Plane[20], _planes);
defineVariable(int, _currentPlaneIndex);

// This is the most dumb code I ever wrote, 3Division please fix that and add parsing :>
// 8.31 -> 8
defineVariable(int, returnValue);
defineVariable(float, someValue);
defineFunction(FloatToInt, int, float: value)
{
	returnValue = 0;
	someValue = 0.0;
	
	while(someValue < value)
	{
		returnValue = returnValue + 1;
		someValue = someValue + 1.0;
	}
	return(returnValue);
}

defineVariable(float, returnValueFloat);
defineVariable(int, someValueInt);

// 7.34 -> 7
defineFunction(IntToFloat, float, int: valueInt)
{
	returnValueFloat = 0.0;
	someValueInt = 0.0;
	
	while(someValueInt < valueInt)
	{
		returnValueFloat = returnValueFloat + 1.0;
		someValueInt = someValueInt + 1;
	}
	return(returnValueFloat);
}

defineFunction(SetupTarget, void, int: type)
{
	//todo: if antonov is available: nuclear fuel

	// todo: multiply if player has bigger planes
	Random(_random);
	_destination = _random % 2;
	
	Random(_random);
	_random = _random % 10;
	if(_random < 2)
	{
		_multiply = 1.0;
		_maxDeliveryTime = 10.0;
	}
	elseif(_random < 4)
	{
		_multiply = 1.5;
		_maxDeliveryTime = 10.0;
	}
	elseif(_random < 7)
	{
		_multiply = 2.0;
		_maxDeliveryTime = 12.0;
	}
	elseif(_random < 8)
	{
		_multiply = 3.0;
		_maxDeliveryTime = 14.0;
	}
	else()
	{
		_multiply = 4.0;
		_maxDeliveryTime = 18.0;
	}
	
	if(type ? 0)
	{
		_resourcesToDeliver = 13.0 * _multiply;
		Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/eletronics.png");
		_basePriceRUB = 1187.62;
		_basePriceUSD = 1508.56;
	}
	elseif(type ? 1)
	{
		_resourcesToDeliver = 19.0 * _multiply;
		Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/mcomponents.png");
		_basePriceRUB = 616.75;
		_basePriceUSD = 753.72;
	}
	elseif(type ? 2)
	{
		_resourcesToDeliver = 39.0 * _multiply;
		Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/aluminium.png");
		_basePriceRUB = 812.21;
		_basePriceUSD = 1049.48;
	}
	elseif(type ? 3)
	{
		_resourcesToDeliver = 13.0 * _multiply;
		Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/ecomponents.png");
		_basePriceRUB = 1147.5;
		_basePriceUSD = 1469.17;
	}
	elseif(type ? 4)
	{
		_resourcesToDeliver = 10.0 * _multiply;
		Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/chemicals.png");
		_basePriceRUB = 1057.32;
		_basePriceUSD = 1371.74;
	}
	else()
	{
		_resourcesToDeliver = 19.0 * _multiply;
		Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/clothes.png");
		_basePriceRUB = 1413.72;
		_basePriceUSD = 2061.39;
	}
	returnVoid();
}

defineFunction(ResourcesGetFromEventType, float, int: typeOfEvent)
{
	// todo: multiply if player has bigger planes
	if(typeOfEvent ? 0)
	{
		_returnValue = _resources.eletronics;
	}
	elseif(typeOfEvent ? 1)
	{
		_returnValue = _resources.mcomponents;
	}
	elseif(typeOfEvent ? 2)
	{
		_returnValue = _resources.aluminium;
	}
	elseif(typeOfEvent ? 3)
	{
		_returnValue = _resources.ecomponents;
	}
	elseif(typeOfEvent ? 4)
	{
		_returnValue = _resources.chemicals;
	}
	elseif(typeOfEvent ? 5)
	{
		_returnValue = _resources.clothes;
	}

	return(_returnValue);
}


defineFunction(main, void)
{
	InitConstants();
	UNKNOWN = 0;
	HEADING_BORDER = 1;
	HEADING_AIRPORT = 2;
	EVENT_TYPES_COUNT = 6;
	PLANES_ARRAY_SIZE = 20;
	NATO = 0;
	USSR = 1;
	
	// main loop
	while(1 ? 1)
	{
		// new random time interval for next event
		Random(_random);
		//todo: remove debug
		_minEventsInterval = 30 * 60;
		_eventsRandomInterval = 60 * 60;
		//_minEventsInterval = 3;
		//_eventsRandomInterval = 2;
		_nextEventWaiting = _minEventsInterval + _random % _eventsRandomInterval;
		
		// wait for next event
		for (i = 0, i < _nextEventWaiting, i = i + 1)
		{
			Script_Sleep(1.0);
		}
		 
		// handle event
		
		// rng event type
		Random(_random);
		_eventType = _random % EVENT_TYPES_COUNT;
		// destination
		_deliveryPending = 1;
		
		if(_destination ? NATO)
		{
			Objectives_CreateNewString("delivery", "NATO delivery");
		}
		else()
		{
			Objectives_CreateNewString("delivery", "USSR delivery");
		}
		
		
		SetupTarget(_eventType);
		Objective_AddRequirement("delivery", 10.0, "editor/status_waiting.png");
	
		Notification_CreateNewStringPic(
		"Aerial delivery",
		"Deliver specified cargo on time to get reward.",
		"resources/airplanes.png",
		vector);
		
		_departedPlanesCount = 0;
		_eventTime = _maxDeliveryTime * 60.0;
		_time = 0.0;
		//event time counter
		while(_deliveryPending ? 1 & j < _eventTime)
		{
			Vehicle_GetNumberOfVehicles(_numberOfVehicles);   
			for (_vehicleIndex = 0, _vehicleIndex < _numberOfVehicles, _vehicleIndex = _vehicleIndex + 1)
			{
				_vehicle.GetDataByIndex(_vehicleIndex);
				if(_vehicle.nVehicleType ? VEHICLETYPE_AIRPLANE)
				{
					_currentPlaneIndex = 150;
					// check if plane is on list
					for(k = 0, k < _departedPlanesCount, k = k + 1)
					{
						_currentPlane = _planes[k];
						if(_currentPlane.id ? _vehicleIndex)
						{
							_currentPlaneIndex = k;
						}
					}
					
					_resources.GetFromVehicle(_vehicleIndex);
					_resourcesAmount = ResourcesGetFromEventType(_eventType);
					_stopBuildingId = _vehicle.nBuilding_StationBuildingID;
					_building.GetDataByIndex(_stopBuildingId);
					
					//plane on list
					if(!(_currentPlaneIndex ? 150))
					{	
						_currentPlane = _planes[_currentPlaneIndex];
						_currentPlane.lastState = _currentPlane.state;
						// check if is heading to border with cargo
						// todo: validate if custom is NATO or Soviet
						if(_resourcesAmount > 2.0 & _building.nType ? BUILDINGTYPE_CUSTOMHOUSE)
						{
							// just departure from terminal
							if(_currentPlane.lastState ? 2)
							{
								_currentPlane.lastCargo = _resourcesAmount;
							}
							_currentPlane.state = HEADING_BORDER;
						}
						
						// check if is heading to airport
						if( _building.nType ? BUILDINGTYPE_CARGO_STATION | _building.nType ? BUILDINGTYPE_AIRPLANE_PARKING)
						{
							// check if empty
							if(_resourcesAmount < 1.0)
							{
								_currentPlane.state = HEADING_AIRPORT;
							}
						}
						
						// just departure from border
						if(_currentPlane.lastState ? HEADING_BORDER & _currentPlane.state ? HEADING_AIRPORT)
						{
							_currentPlane.exported = _currentPlane.exported + _currentPlane.lastCargo;
							_currentPlane.lastCargo = 0.0;
						}
						
						_planes[_currentPlaneIndex] = _currentPlane;
						
					}
					// not on list 
					// check if is heading to border with cargo

					// todo: validate if custom is NATO or Soviet
					else()
					{
						if(_resourcesAmount > 2.0 & _building.nType ? BUILDINGTYPE_CUSTOMHOUSE)
						{  
							_currentPlane.id = _vehicleIndex;
							_currentPlane.state = HEADING_BORDER;
							_currentPlane.lastState = HEADING_BORDER;
							_currentPlane.exported = 0.0;
							_currentPlane.lastCargo = _resourcesAmount;
							
							_planes[_departedPlanesCount] = _currentPlane;
							_departedPlanesCount = _departedPlanesCount + 1;
						}
					}
				}
			}
			
			_deliveredResources = 0.0;
			for (k = 0, k < PLANES_ARRAY_SIZE, k = k + 1)
			{
				_deliveredResources = _deliveredResources + _planes[k].exported;
			}
			
			if(_deliveredResources > _resourcesToDeliver)
			{
				Objective_UpdateRequirementToTarget("delivery", 0);
				Objective_SetComplete("delivery");
				Notification_CreateNewStringPic(
					"Delivery completed",
					"You exported all required products. You will be rewarded with additional bonus.",
					"editor/status_ok.png",
					vector);
				_deliveryPending = 0;
				
				Date_GetCurrentDate_DMY(_day, _month, _year);
				_year = _year - 1960;
				_years = IntToFloat(_year);
				
				// todo: reward
				if(_destination ? NATO)
				{
					_reward = _resourcesToDeliver * _basePriceUSD * 2.0;
					// inflation
					_reward = _reward * (1.015 ^ _years);
					_rewardInt =  FloatToInt(_reward);
					Money_AddUSD(_rewardInt);
					
				}
				else()
				{
					_reward = _resourcesToDeliver * _basePriceUSD * 2.0;
					// inflation
					_reward = _reward * (1.05 ^ _years);
					_rewardInt =  FloatToInt(_reward);
					Money_AddUSD(_rewardInt);
				}
				
				//nato: 1,5% inflation
				// soviet: 5% inflation
				Script_Sleep(5.0);
			}
			else()
			{
				Objective_UpdateRequirement("delivery", 0, _deliveredResources);
			}
			
			
			Script_Sleep(1.0);
			j = j + 1.0;
			_time = _time + 0.01666;
			Objective_UpdateRequirement("delivery", 1, _time);
		}
		if(_deliveryPending ? 1)
		{
			Notification_CreateNewStringPic(
					"Delivery failed",
					"The time for delivery is over.",
					"editor/status_notok.png",
					vector);
		}
		Objectives_ClearAll();
		
		// clear departuredPlanes
		for (k = 0, k < PLANES_ARRAY_SIZE, k = k + 1)
		{
			_currentPlane =  _planes[k];
			_currentPlane.id = 0;
			_currentPlane.state = UNKNOWN;
			_currentPlane.lastState = UNKNOWN;
			_currentPlane.exported = 0.0;
			_currentPlane.lastCargo = 0.0;
			_planes[k] = _currentPlane;
		}
	}
	end();
}

