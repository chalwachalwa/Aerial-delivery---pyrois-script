include("include/SOVIETInstructions.txt");
defineVariable(int, _stopBuildingId);
defineVariable(Building, _building);
defineVariable(Resources, _resources);
defineVariable(int, _numberOfVehicles);
defineVariable(Vehicle, _vehicle);
defineVariable(vec3, vector);

defineVariable(int, i);
defineVariable(int, j);
defineVariable(int, k);
defineVariable(int, m);
defineVariable(int, _vehicleIndex);

defineVariable(int, _random);
defineVariable(int, _minEventsInterval);
defineVariable(int, _eventsRandomInterval);
defineVariable(int, _nextEventWaiting);
defineVariable(int, _eventType);
defineVariable(int, _eventTypesCount);
defineVariable(int, _eventTime);
defineVariable(float, _deliveredResources);
defineVariable(float, _resourcesToDeliver);
defineVariable(char, _deliveryPending);

//defineArray(int[100], _planesIndexes);
defineArray(int[20], _departuredPlanes);
defineArray(int[20], _arrivingPlanes);
defineArray(float[20], _departuredPlanesCargo);
defineVariable(int, _departedPlaneIndex);
defineVariable(char, _planeIsOnDepartureList);
defineVariable(float, _time);

defineFunction(main, void)
{
	InitConstants();
	
	// main loop
	while(1 ? 1)
	{
		// new random time interval for next event
		Random(_random);
		//debug
		//_minEventsInterval = 30 * 60;
		//_eventsRandomInterval = 90 * 60;
		_minEventsInterval = 3;
		_eventsRandomInterval = 2;
		_nextEventWaiting = _minEventsInterval + _random % _eventsRandomInterval;
		
		// wait for next event
		for (i = 0, i < _nextEventWaiting, i = i + 1)
		{
			Script_Sleep(1.0);
		}
		 
		// handle event
		
		// rng event type
		Random(_random);
		//debug
		//_eventType = _random % _eventTypesCount;
		_eventType = 0;
		_deliveryPending = 1;
		if(_eventType ? 0)
		{
			Objectives_CreateNewString("delivery", "Soviet delivery");
			_resourcesToDeliver = 12.0;
			Objective_AddRequirement("delivery", _resourcesToDeliver, "resources/eletronics.png");
			Objective_AddRequirement("delivery", 10.0, "editor/status_waiting.png");
			
		
			Notification_CreateNewStringPic(
			"Aerial delivery",
			"Deliver 20t of electronics",
			"resources/airplanes.png",
			vector);
			
			_departedPlaneIndex = 0;
			_eventTime = 10 * 60;
			_time = 0.0;
			//event time counter
			//for (j = 0, j < _eventTime, j = j + 1)
			while(_deliveryPending ? 1 & j < _eventTime)
			{
				// get vehicles
				Vehicle_GetNumberOfVehicles(_numberOfVehicles);   
				for (_vehicleIndex = 0, _vehicleIndex < _numberOfVehicles, _vehicleIndex = _vehicleIndex + 1)
				{
					_vehicle.GetDataByIndex(_vehicleIndex);
					
					// get airplanes
					if(_vehicle.nVehicleType ? VEHICLETYPE_AIRPLANE)
					{
						// airplanes with electronics
						_resources.GetFromVehicle(_vehicleIndex);
						if(_resources.eletronics > 5.0)
						{  
							_stopBuildingId = _vehicle.nBuilding_StationBuildingID;
							_building.GetDataByIndex(_stopBuildingId);
							
							// is custom
							if(_building.nType ? BUILDINGTYPE_CUSTOMHOUSE)
							{
								_planeIsOnDepartureList = 0;
								//check if this plane is not on list
								for (k = 0, k < _departedPlaneIndex + 1, k = k + 1)
								{
									if(_departuredPlanes[k] ? _vehicleIndex)
									{
										_planeIsOnDepartureList = 1;
									}
								}
								if(_planeIsOnDepartureList ? 0)
								{
									// add departing planes
									_departuredPlanes[k] = _vehicleIndex;
									_departuredPlanesCargo[k] = _resources.eletronics;
									_departedPlaneIndex = _departedPlaneIndex + 1;
								}
								
							}
						}
					}
				}
				
				// all departed planes. Check if they are arriving
				_deliveredResources = 0.0;
				for (m = 0, m < _departedPlaneIndex + 1, m = m + 1)
				{
					_vehicleIndex = _departuredPlanes[m];
					if(_vehicleIndex > 0)
					{
						_vehicle.GetDataByIndex(_vehicleIndex);
						
						_stopBuildingId = _vehicle.nBuilding_StationBuildingID;
						_building.GetDataByIndex(_stopBuildingId);
						
						// if this is emptied plane heading to airport
						if( _building.nType ? BUILDINGTYPE_CARGO_STATION | _building.nType ? BUILDINGTYPE_AIRPLANE_PARKING)
						{
							_resources.GetFromVehicle(_vehicleIndex);
							if(_resources.eletronics < 1.0)
							{
								_arrivingPlanes[m] = _vehicleIndex;
							}
						}
					}
				}
				for (k = 0, k < _departedPlaneIndex + 1, k = k + 1)
				{
					if(_arrivingPlanes[k] > 0)
					{
						//Window_ShowText("dupa");
						_deliveredResources = _deliveredResources + _departuredPlanesCargo[k];
					}
				}
				
				if(_deliveredResources > _resourcesToDeliver)
				{
					Objective_UpdateRequirementToTarget("delivery", 0);
					Objective_SetComplete("delivery");
					Notification_CreateNewStringPic(
						"Delivery completed",
						"You exported all required products. You will be rewarded with additional bonus.",
						"editor/status_ok.png",
						vector);
					_deliveryPending = 0;
					Script_Sleep(10.0);
				}
				else()
				{
					Objective_UpdateRequirement("delivery", 0, _deliveredResources);
				}
				
				
				Script_Sleep(1.0);
				j = j + 1;
				_time = _time + 0.01666;
				Objective_UpdateRequirement("delivery", 1, _time);
			}
			if(_deliveryPending ? 1)
			{
				Notification_CreateNewStringPic(
						"Delivery failed",
						"The time for delivery is over.",
						"editor/status_notok.png",
						vector);
			}
			Objectives_ClearAll();
			
			// clear departuredPlanes
			for (k = 0, k < 20, k = k + 1)
			{
				_departuredPlanes[k] = 0;
				_departuredPlanesCargo[k] = 0.0;
				_arrivingPlanes[k] = 0;
			}
		}
	}
	end();
}

